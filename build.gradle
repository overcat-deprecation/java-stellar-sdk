import org.gradle.internal.os.OperatingSystem

buildscript {
    ext.okhttpclientVersion = '4.11.0'
}

plugins {
    id "io.freefair.lombok" version "6.4.1"
    id "java"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "project-report"
    id "maven-publish"
    id "java-library"
    id "com.diffplug.spotless" version "6.19.0"
}

spotless {
    java {
        importOrder("java", "javax", "org.stellar")
        removeUnusedImports()
        googleJavaFormat()
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8.toString()
version = '0.41.0-beta.21'
group = 'stellar'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes(
                "Implementation-Title": "stellar-sdk",
                "Implementation-Version": project.getVersion()
        )
    }
    archiveFileName.set('stellar-sdk.jar')
}

tasks.register('uberJar', Jar) {
    // https://docs.gradle.org/current/userguide/working_with_files.html#sec:creating_uber_jar_example
    manifest {
        attributes(
                "Implementation-Title": "stellar-sdk",
                "Implementation-Version": project.getVersion()
        )
    }
    archiveClassifier.set('uber')
    archiveFileName.set('stellar-sdk-uber.jar')
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.squareup.okhttp3:okhttp:${okhttpclientVersion}"
    implementation "com.squareup.okhttp3:okhttp-sse:${okhttpclientVersion}"
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'net.i2p.crypto:eddsa:0.3.0'
    implementation 'commons-codec:commons-codec:1.16.0'

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpclientVersion}"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0'
}

tasks.named('test') { task ->
    useJUnitPlatform()
}

tasks.register('updateGitHook', Copy) {
    from 'scripts/pre-commit.sh'
    into '.git/hooks'
    rename { fileName ->
        fileName.endsWith('.sh') ? fileName[0..-4] : fileName
    }
}

tasks.javadoc {
    destinationDir = file('javadoc')
    failOnError = true
    exclude("org/stellar/sdk/xdr/**")
    // cast options to StandardJavadocDocletOptions
    // https://docs.gradle.org/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
    StandardJavadocDocletOptions options = options as StandardJavadocDocletOptions
    options.setSplitIndex(true)
    options.setMemberLevel(JavadocMemberLevel.PUBLIC)
    options.setEncoding('UTF-8')
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    archiveFileName.set('stellar-sdk-javadoc.jar')
}

publishing {
    publications {
        sdkLibrary(MavenPublication) { publication ->
            artifact tasks.jar
            artifact tasks.uberJar
        }
        javadocPublication(MavenPublication) { publication ->
            artifact tasks.javadocJar
        }
    }
}

artifacts {
    archives tasks.jar
    archives tasks.uberJar
    archives tasks.javadocJar
}